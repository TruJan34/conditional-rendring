
Conditional Rendering:

Element Variables: 
You can use variables to store elements. This can help you conditionally render 
a part of the component while the rest of the output doesn’t change.
Ex:
 if (isLoggedIn) {
      button = <LogoutButton onClick={this.handleLogoutClick} />;
    } else {
      button = <LoginButton onClick={this.handleLoginClick} />;
    }
<div>
	<Greeting isLoggedIn={isLoggedIn} />
	{button}
</div>
	  
	  
Inline If with Logical && Operator:

return (
    <div>
      <h1>Hello!</h1>
      {unreadMessages.length > 0 &&
        <h2>
          You have {unreadMessages.length} unread messages.
        </h2>
      }
    </div>
  );

It works because in JavaScript, true && expression always evaluates to expression, 
and false && expression always evaluates to false.
Therefore, if the condition is true, the element right after && will appear in the output. 
If it is false, React will ignore and skip it.


Preventing Component from Rendering:
 if (!props.warn) {
      return null;
    }

handleToggleClick() {
    this.setState(prevState => ({
      showWarning: !prevState.showWarning
    }));
  }

Returning null from a component’s render method does not affect the firing of the component’s lifecycle methods.
For instance componentDidUpdate will still be called.

